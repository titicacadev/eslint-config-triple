name: CD

on:
  push:
    branches-ignore:
      - '**'
    tags:
      - 'release-prod-*'
      - 'release-canary'

env:
  GITHUB_API_URL_BASE: https://api.github.com/repos/${{ github.repository }}
  # Node.js
  NODE_VERSION: '16.x'
  NPM_REGISTRY_URL: 'https://registry.npmjs.org'
  # Slack Notifications
  SLACK_WEBHOOK: ${{ secrets.GHA_NOTIFICATIONS_WEBHOOK_URL }}
  SLACK_CHANNEL: '#a-dev-notifications' # 메시지 보낼 채널
  SLACK_USERNAME: 'ESLint Config Triple' # 메시지를 보내는 계정 이름
  SLACK_ICON_EMOJI: ':triple_new:'
  SLACK_DETAIL_URL: 'https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}'
  SLACK_GITHUB_REPOSITORY: ${{ github.repository }}
  SLACK_AUTHOR_NAME: ${{ github.event.sender.login }}
  SLACK_AUTHOR_ICON: ${{ github.event.sender.avatar_url }}
  SLACK_FOOTER: ${{ github.repository }}
  SLACK_GITHUB_REF: ${{ github.event.ref }} # 메시지에 ref로 표시되는 값
  SLACK_GITHUB_EVENT_NAME: ${{ github.event_name }} # 메시지에 Event로 표시되는 값

jobs:
  wait-for-ci:
    runs-on: ubuntu-latest

    steps:
      - name: Use Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: ${{ env.NPM_REGISTRY_URL }}

      - name: Wait for CI
        uses: fountainhead/action-wait-for-check@v1.0.0
        id: wait-for-ci
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          checkName: build
          ref: ${{ github.event.head }}

      - name: Notify checking CI timeout
        if: steps.wait-for-ci.outputs.conclusion == 'timed_out'
        env:
          NODE_AUTH_TOKEN: ${{ secrets.READ_ONLY_NPM_TOKEN }}
          SLACK_COLOR: fail
          SLACK_TITLE: ':pleading: CI Waiting timeout'
          SLACK_TOPIC: 'CI workflow가 시작되었는지, 기다리는 job의 이름이 CI job과 일치하는지, 확인해주세요.'
        run: npx @titicaca/gha-tools notify

      - name: Notify checking CI failure
        if: steps.wait-for-ci.outputs.conclusion == 'failure'
        env:
          NODE_AUTH_TOKEN: ${{ secrets.READ_ONLY_NPM_TOKEN }}
          SLACK_COLOR: fail
          SLACK_TITLE: ':pleading: CI FAILURE'
          SLACK_TOPIC: '배포를 중단합니다.'
        run: npx @titicaca/gha-tools notify

      - name: Shutdown workflow
        if: steps.wait-for-ci.outputs.conclusion != 'success'
        run: node -e 'process.exit(1)'

  release:
    needs: wait-for-ci
    if: github.event.ref != 'refs/tags/release-canary'
    runs-on: ubuntu-latest

    steps:
      - name: Use Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: ${{ env.NPM_REGISTRY_URL }}

      - uses: actions/checkout@v2

      - name: Export releasing version
        run: |
          VERSION="v$(cat ./package.json | jq -r '.version')"
          echo "DEPLOY_VERSION=$VERSION" >> $GITHUB_ENV

      - name: Notify release start to Slack
        env:
          NODE_AUTH_TOKEN: ${{ secrets.READ_ONLY_NPM_TOKEN }}
          SLACK_COLOR: gray
          SLACK_TITLE: ':rocket: Release WORKING'
          SLACK_TOPIC: ${{ env.DEPLOY_VERSION }}
        run: npx @titicaca/gha-tools notify

      - name: Publish to npm
        run: |
          npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.READ_WRITE_NPM_TOKEN }}

      - name: Notify release success to Slack
        if: success()
        env:
          NODE_AUTH_TOKEN: ${{ secrets.READ_ONLY_NPM_TOKEN }}
          SLACK_COLOR: success
          SLACK_TITLE: ':tada: Release SUCCESS'
          SLACK_TOPIC: ${{ env.DEPLOY_VERSION }}
        run: npx @titicaca/gha-tools notify

      - name: Notify release failure to Slack
        if: failure()
        env:
          NODE_AUTH_TOKEN: ${{ secrets.READ_ONLY_NPM_TOKEN }}
          SLACK_COLOR: fail
          SLACK_TITLE: ':pleading: Release FAILURE'
          SLACK_TOPIC: ${{ env.DEPLOY_VERSION }}
        run: npx @titicaca/gha-tools notify

  canary-release:
    needs: wait-for-ci
    if: github.event.ref == 'refs/tags/release-canary'
    runs-on: ubuntu-latest

    steps:
      - name: Use Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: ${{ env.NPM_REGISTRY_URL }}

      - uses: actions/checkout@v2

      - name: Define canary release version
        run: |
          echo "DEPLOY_VERSION=v0.0.0-${GITHUB_SHA:0:7}" >> $GITHUB_ENV

      - name: Notify release start to Slack
        env:
          NODE_AUTH_TOKEN: ${{ secrets.READ_ONLY_NPM_TOKEN }}
          SLACK_COLOR: gray
          SLACK_TITLE: ':rocket: Release WORKING'
          SLACK_TOPIC: ${{ env.DEPLOY_VERSION }}
        run: npx @titicaca/gha-tools notify

      - name: Update to defined version
        run: npm version $DEPLOY_VERSION --git-tag-version=false

      - name: Publish as canary
        env:
          NODE_AUTH_TOKEN: ${{ secrets.READ_WRITE_NPM_TOKEN }}
        run: npm publish --tag canary

      - name: Notify release success to Slack
        if: success()
        env:
          NODE_AUTH_TOKEN: ${{ secrets.READ_ONLY_NPM_TOKEN }}
          SLACK_COLOR: success
          SLACK_TITLE: ':tada: Release SUCCESS'
          SLACK_TOPIC: ${{ env.DEPLOY_VERSION }}
        run: npx @titicaca/gha-tools notify

      - name: Notify release failure to Slack
        if: failure()
        env:
          NODE_AUTH_TOKEN: ${{ secrets.READ_ONLY_NPM_TOKEN }}
          SLACK_COLOR: fail
          SLACK_TITLE: ':pleading: Release FAILURE'
          SLACK_TOPIC: ${{ env.DEPLOY_VERSION }}
        run: npx @titicaca/gha-tools notify
